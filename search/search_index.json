{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Lite # What is Lite? # Lite is a private game framework made by frames, It's inspidered by other popular game framworks although this is fully made to frames liking and how he thinks that roblox will be easier to run. It includes many features such are a service, promise, proxy, firebase systems. Now let's started and move on to how to use it! Warning This documentation is in it's early stages so it will not document everything. If you find something that should be added to the docs please contact frames#4888 via discord.","title":"Home"},{"location":"#welcome-to-lite","text":"","title":"Welcome to Lite"},{"location":"#what-is-lite","text":"Lite is a private game framework made by frames, It's inspidered by other popular game framworks although this is fully made to frames liking and how he thinks that roblox will be easier to run. It includes many features such are a service, promise, proxy, firebase systems. Now let's started and move on to how to use it! Warning This documentation is in it's early stages so it will not document everything. If you find something that should be added to the docs please contact frames#4888 via discord.","title":"What is Lite?"},{"location":"start/","text":"Getting Started # Starting out with Lite is really easy. Installation # To install Lite, there is really only one way. You will have to contact frames#4888 for permission to use the framwork. Configuration # Once you get the model, Import the model to your roblox game through the toolbox . No move both the main file Lite and the folder LiteServices to ReplicatedStorage Warning I'd like to mention that the folder LiteServices is required to remain at ReplicatedStorage however the main module Lite isn't required to. Setup # Server # Simply create a Script in ServerScriptService and then you will need to require your Lite module. This may not work if you have placed your copy of Lite somewhere other than ReplicatedStorage . local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) Starting on Server # local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) Lite : Start () --> You can also use Lite.Start() Client # Again simply create a LocalScript in you client-side most commenly made in StarterPlayerScripts .This may not work if you have placed your copy of Lite somewhere other than ReplicatedStorage . local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) Starting on Client # local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) Lite : Start () --> You can also use Lite.Start()","title":"Getting Started"},{"location":"start/#getting-started","text":"Starting out with Lite is really easy.","title":"Getting Started"},{"location":"start/#installation","text":"To install Lite, there is really only one way. You will have to contact frames#4888 for permission to use the framwork.","title":"Installation"},{"location":"start/#configuration","text":"Once you get the model, Import the model to your roblox game through the toolbox . No move both the main file Lite and the folder LiteServices to ReplicatedStorage Warning I'd like to mention that the folder LiteServices is required to remain at ReplicatedStorage however the main module Lite isn't required to.","title":"Configuration"},{"location":"start/#setup","text":"","title":"Setup"},{"location":"start/#server","text":"Simply create a Script in ServerScriptService and then you will need to require your Lite module. This may not work if you have placed your copy of Lite somewhere other than ReplicatedStorage . local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite )","title":"Server"},{"location":"start/#starting-on-server","text":"local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) Lite : Start () --> You can also use Lite.Start()","title":"Starting on Server"},{"location":"start/#client","text":"Again simply create a LocalScript in you client-side most commenly made in StarterPlayerScripts .This may not work if you have placed your copy of Lite somewhere other than ReplicatedStorage . local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite )","title":"Client"},{"location":"start/#starting-on-client","text":"local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) Lite : Start () --> You can also use Lite.Start()","title":"Starting on Client"},{"location":"communication/services/","text":"Services # Services are premade functions that can be reused throughout the whole game, depending on if the client-side or server-side can access it. Creating a Service # To create a service simply create a ModuleScript in LiteServices and follow this structure. Warning Make sure to name the ModuleScript the same name as the service. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) return Lite . Service . New ( \"ExampleService\" ) . Structure ({ Server = {}, Client = {}, Shared = {}, }) . Finish () Requiring a Service # To require a service on either the client-side or server-side is simple as doing this. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage : WaitForChild ( \"Lite\" )) local ExampleService = Lite . Service . Require ( \"ExampleService\" ) Building Functions # To implement functions to your service, you will be require to structure them like this. Note If you would like to create the function just for the server-side create the function inside the Server table in your structure or if you would like to create it just for the client-side create the function inside the Client table. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) function RunOnServer () return print ( \"Running on the server\" ) end return Lite . Service . New ( \"ExampleService\" ) . Structure ({ Server = { RunOnServer = RunOnServer }, Client = {}, Shared = {}, }) . Finish () Running a Function # To run your function simply require your service and call the function just like this. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage : WaitForChild ( \"Lite\" )) local ExampleService = Lite . Service . Require ( \"ExampleService\" ) ExampleService . RunOnServer () --> Outputs: Running on the server Client-Server Boundary # We can use the .Expose() function when creating a service to let the client-side or server-side use functions on the client or the server. As an example we are going to let the client use the functions on the server. Note You can also let the server use functions on the client. You can also expose a specific function instead of the whole server, Example: .Expose(\"Server.RunOnServer\", \"Client\") . local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) function RunOnServer () return print ( \"Running on the server\" ) end return Lite . Service . New ( \"ExampleService\" ) . Structure ({ Server = { RunOnServer = RunOnServer }, Client = {}, Shared = {}, }) . Expose ( \"Server\" , \"Client\" ) . Finish () Duplicate Functions # Lite already handles duplicate functions. If you have 2 functions with the same name on the server and the client, and the server is exposed to the client it will not error. Instead it will run both functions at the same time.","title":"Services"},{"location":"communication/services/#services","text":"Services are premade functions that can be reused throughout the whole game, depending on if the client-side or server-side can access it.","title":"Services"},{"location":"communication/services/#creating-a-service","text":"To create a service simply create a ModuleScript in LiteServices and follow this structure. Warning Make sure to name the ModuleScript the same name as the service. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) return Lite . Service . New ( \"ExampleService\" ) . Structure ({ Server = {}, Client = {}, Shared = {}, }) . Finish ()","title":"Creating a Service"},{"location":"communication/services/#requiring-a-service","text":"To require a service on either the client-side or server-side is simple as doing this. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage : WaitForChild ( \"Lite\" )) local ExampleService = Lite . Service . Require ( \"ExampleService\" )","title":"Requiring a Service"},{"location":"communication/services/#building-functions","text":"To implement functions to your service, you will be require to structure them like this. Note If you would like to create the function just for the server-side create the function inside the Server table in your structure or if you would like to create it just for the client-side create the function inside the Client table. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) function RunOnServer () return print ( \"Running on the server\" ) end return Lite . Service . New ( \"ExampleService\" ) . Structure ({ Server = { RunOnServer = RunOnServer }, Client = {}, Shared = {}, }) . Finish ()","title":"Building Functions"},{"location":"communication/services/#running-a-function","text":"To run your function simply require your service and call the function just like this. local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage : WaitForChild ( \"Lite\" )) local ExampleService = Lite . Service . Require ( \"ExampleService\" ) ExampleService . RunOnServer () --> Outputs: Running on the server","title":"Running a Function"},{"location":"communication/services/#client-server-boundary","text":"We can use the .Expose() function when creating a service to let the client-side or server-side use functions on the client or the server. As an example we are going to let the client use the functions on the server. Note You can also let the server use functions on the client. You can also expose a specific function instead of the whole server, Example: .Expose(\"Server.RunOnServer\", \"Client\") . local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local Lite = require ( ReplicatedStorage . Lite ) function RunOnServer () return print ( \"Running on the server\" ) end return Lite . Service . New ( \"ExampleService\" ) . Structure ({ Server = { RunOnServer = RunOnServer }, Client = {}, Shared = {}, }) . Expose ( \"Server\" , \"Client\" ) . Finish ()","title":"Client-Server Boundary"},{"location":"communication/services/#duplicate-functions","text":"Lite already handles duplicate functions. If you have 2 functions with the same name on the server and the client, and the server is exposed to the client it will not error. Instead it will run both functions at the same time.","title":"Duplicate Functions"}]}